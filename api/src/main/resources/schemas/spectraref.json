{
  "type": "object",
  "required": [
    "ms_run",
    "reference"
  ],
  "description": "Reference to a spectrum in a spectrum file, for example a fragmentation spectrum has been used to support the identification. If a separate spectrum file has been used for fragmentation spectrum, this MUST be reported in the metadata section as additional ms_runs. The reference must be in the format ms_run[1-n]:{SPECTRA_REF} where SPECTRA_REF MUST follow the format defined in 5.2 (including references to chromatograms where these are used to inform identification). Multiple spectra MUST be referenced using a \u201c|\u201d delimited list for the (rare) cases in which search engines have combined or aggregated multiple spectra in advance of the search to make identifications.\n\nIf a fragmentation spectrum has not been used, the value should indicate the ms_run to which is identification is mapped e.g. \u201cms_run[1]\u201d.\n",
  "x-mztab-example": "SEH\tSME_ID\t\u2026\tspectra_ref\t\u2026\nSME\t1\t\t\tms_run[1]:index=5\t\u2026\n",
  "properties": {
    "ms_run": {
      "description": "Specification of ms_run. \nlocation: Location of the external data file e.g. raw files on which analysis has been performed. If the actual location of the MS run is unknown, a \u201cnull\u201d MUST be used as a place holder value, since the [1-n] cardinality is referenced elsewhere. If pre-fractionation has been performed, then [1-n] ms_runs SHOULD be created per assay. \ninstrument_ref: If different instruments are used in different runs, instrument_ref can be used to link a specific instrument to a specific run. \nformat: Parameter specifying the data format of the external MS data file. If ms_run[1-n]-format is present, ms_run[1-n]-id_format SHOULD also be present, following the parameters specified in Table 1. \nid_format: Parameter specifying the id format used in the external data file. If ms_run[1-n]-id_format is present, ms_run[1-n]-format SHOULD also be present.\nfragmentation_method: The type(s) of fragmentation used in a given ms run.\nscan_polarity: The polarity mode of a given run. Usually only one value SHOULD be given here except for the case of mixed polarity runs.\nhash: Hash value of the corresponding external MS data file defined in ms_run[1-n]-location. If ms_run[1-n]-hash is present, ms_run[1-n]-hash_method SHOULD also be present.\nhash_method: A parameter specifying the hash methods used to generate the String in ms_run[1-n]-hash. Specifics of the hash method used MAY follow the definitions of the mzML format. If ms_run[1-n]-hash is present, ms_run[1-n]-hash_method SHOULD also be present.\n",
      "x-mztab-example": "COM\tlocation can be a local or remote URI\nMTD\tms_run[1]-location\tfile:///C:/path/to/my/file.mzML\nMTD\tms_run[1]-instrument_ref\tinstrument[1]\nMTD\tms_run[1]-format\t[MS, MS:1000584, mzML file, ]\nMTD\tms_run[1]-id_format\t[MS, MS:1000530, mzML unique identifier, ]\nMTD\tms_run[1]-fragmentation_method[1]\t[MS, MS:1000133, CID, ]\nCOM\tfor mixed polarity scan scenarios\nMTD\tms_run[1]-scan_polarity[1]\t[MS, MS:1000130, positive scan, ]\nMTD\tms_run[1]-scan_polarity[2]\t[MS, MS:1000129, negative scan, ]\nMTD\tms_run[1]-hash_method\t[MS, MS:1000569, SHA-1, ]\nMTD\tms_run[1]-hash\tde9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3\n",
      "x-mztab-serialize-by-id": "true",
      "type": "object",
      "required": [
        "id",
        "location"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "name": {
          "type": "string",
          "description": "The msRun's name."
        },
        "location": {
          "type": "string",
          "format": "uri",
          "description": "The msRun's location URI."
        },
        "instrument_ref": {
          "description": "The name, source, analyzer and detector of the instruments used in the experiment. Multiple instruments are numbered [1-n].",
          "x-mztab-example": "MTD\tinstrument[1]-name\t[MS, MS:1000449, LTQ Orbitrap,]\nMTD\tinstrument[1]-source\t[MS, MS:1000073, ESI,]\n\u2026\nMTD\tinstrument[2]-source\t[MS, MS:1000598, ETD,]\nMTD\tinstrument[1]-analyzer[1]\t[MS, MS:1000291, linear ion trap,]\n\u2026\nMTD\tinstrument[2]-analyzer[1]\t[MS, MS:1000484, orbitrap,]\nMTD\tinstrument[1]-detector\t[MS, MS:1000253, electron multiplier,]\n\u2026\nMTD\tinstrument[2]-detector\t[MS, MS:1000348, focal plane collector,]\n",
          "x-mztab-serialize-by-id": "true",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "name": {
              "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
              "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
              "type": "object",
              "required": [
                "name",
                "value"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "cv_label": {
                  "type": "string",
                  "default": ""
                },
                "cv_accession": {
                  "type": "string",
                  "default": ""
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                }
              }
            },
            "source": {
              "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
              "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
              "type": "object",
              "required": [
                "name",
                "value"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "cv_label": {
                  "type": "string",
                  "default": ""
                },
                "cv_accession": {
                  "type": "string",
                  "default": ""
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                }
              }
            },
            "analyzer": {
              "type": "array",
              "description": "The instrument's mass analyzer, as defined by the parameter.",
              "default": [],
              "items": {
                "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
                "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1
                  },
                  "cv_label": {
                    "type": "string",
                    "default": ""
                  },
                  "cv_accession": {
                    "type": "string",
                    "default": ""
                  },
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "default": ""
                  }
                }
              }
            },
            "detector": {
              "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
              "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
              "type": "object",
              "required": [
                "name",
                "value"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "cv_label": {
                  "type": "string",
                  "default": ""
                },
                "cv_accession": {
                  "type": "string",
                  "default": ""
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                }
              }
            }
          }
        },
        "format": {
          "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
          "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
          "type": "object",
          "required": [
            "name",
            "value"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "cv_label": {
              "type": "string",
              "default": ""
            },
            "cv_accession": {
              "type": "string",
              "default": ""
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            }
          }
        },
        "id_format": {
          "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
          "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
          "type": "object",
          "required": [
            "name",
            "value"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "cv_label": {
              "type": "string",
              "default": ""
            },
            "cv_accession": {
              "type": "string",
              "default": ""
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            }
          }
        },
        "fragmentation_method": {
          "type": "array",
          "default": [],
          "items": {
            "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
            "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
            "type": "object",
            "required": [
              "name",
              "value"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int32",
                "minimum": 1
              },
              "cv_label": {
                "type": "string",
                "default": ""
              },
              "cv_accession": {
                "type": "string",
                "default": ""
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string",
                "default": ""
              }
            }
          },
          "description": "The fragmentation methods applied during this msRun."
        },
        "scan_polarity": {
          "type": "array",
          "default": [],
          "items": {
            "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
            "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
            "type": "object",
            "required": [
              "name",
              "value"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int32",
                "minimum": 1
              },
              "cv_label": {
                "type": "string",
                "default": ""
              },
              "cv_accession": {
                "type": "string",
                "default": ""
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string",
                "default": ""
              }
            }
          },
          "description": "The scan polarity/polarities used during this msRun."
        },
        "hash": {
          "type": "string",
          "description": "The file hash value of this msRun's data file."
        },
        "hash_method": {
          "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
          "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
          "type": "object",
          "required": [
            "name",
            "value"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "cv_label": {
              "type": "string",
              "default": ""
            },
            "cv_accession": {
              "type": "string",
              "default": ""
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            }
          }
        }
      }
    },
    "reference": {
      "description": "The (vendor-dependendent) reference string to the actual mass spectrum.\n",
      "type": "string"
    }
  },
  "$schema": "http://json-schema.org/schema#"
}