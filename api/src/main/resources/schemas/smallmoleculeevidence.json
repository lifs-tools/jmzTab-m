{
  "type": "object",
  "required": [
    "sme_id",
    "evidence_input_id",
    "database_identifier",
    "exp_mass_to_charge",
    "charge",
    "theoretical_mass_to_charge",
    "spectra_ref",
    "identification_method",
    "ms_level",
    "rank"
  ],
  "description": "The small molecule evidence section is table-based, representing evidence for identifications of small molecules/features, from database search or any other process used to give putative identifications to molecules. In a typical case, each row represents one result from a single search or intepretation of a piece of evidence e.g. a database search with a fragmentation spectrum. Multiple results from a given input data item (e.g. one fragment spectrum) SHOULD share the same value under evidence_input_id.\n\nThe small molecule evidence section MUST always come after the Small Molecule Feature Table. All table columns MUST be Tab separated. There MUST NOT be any empty cells. Missing values MUST be reported using \u201cnull\u201d.\n\nThe order of columns MUST follow the order specified below.\n\nAll columns are MANDATORY except for \u201copt_\u201d columns.\n",
  "properties": {
    "prefix": {
      "type": "string",
      "description": "The small molecule evidence table row prefix. SME MUST be used for rows of the small molecule evidence table.",
      "x-mztab-example": "SME\t1\t\u2026\n",
      "enum": [
        "SME"
      ],
      "default": "SME",
      "readOnly": true
    },
    "header_prefix": {
      "type": "string",
      "description": "The small molecule evidence table header prefix. SEH MUST be used for the small molecule evidence table header line (the column labels).",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\n",
      "enum": [
        "SEH"
      ],
      "default": "SEH",
      "readOnly": true
    },
    "sme_id": {
      "type": "integer",
      "description": "A within file unique identifier for the small molecule evidence result.",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\nSME\t1\t\u2026\n",
      "format": "int32"
    },
    "evidence_input_id": {
      "type": "string",
      "description": "A within file unique identifier for the input data used to support this identification e.g. fragment spectrum, RT and m/z pair, isotope profile that was used for the identification process, to serve as a grouping mechanism, whereby multiple rows of results from the same input data share the same ID. The identifiers may be human readable but should not be assumed to be interpretable. For example, if fragmentation spectra have been searched then the ID may be the spectrum reference, or for accurate mass search, the ms_run[2]:458.75.",
      "x-mztab-example": "SEH\tSME_ID\tevidence_input_id\t\u2026\nSME\t1\tms_run[1]:mass=278.65;rt=376.5\nSME\t2\tms_run[1]:mass=278.65;rt=376.5\nSME\t3\tms_run[1]:mass=278.65;rt=376.5\n(in this example three identifications were made from the same accurate mass/RT library search)\n"
    },
    "database_identifier": {
      "type": "string",
      "description": "The putative identification for the small molecule sourced from an external database, using the same prefix specified in database[1-n]-prefix.\n\nThis could include additionally a chemical class or an identifier to a spectral library entity, even if its actual identity is unknown.\n\nFor the \u201cno database\u201d case, \"null\" must be used. The unprefixed use of \"null\" is prohibited for any other case. If no putative identification can be reported for a particular database, it MUST be reported as the database prefix followed by null.\n",
      "x-mztab-example": "SEH\tSME_ID\tidentifier\t\u2026\nSME\t1\tCID:00027395\t\u2026\nSME\t2\tHMDB:HMDB12345\t\u2026\nSME\t3\tCID:null\t\u2026\n"
    },
    "chemical_formula": {
      "type": "string",
      "description": "The chemical formula of the identified compound e.g. in a database, assumed to match the theoretical mass to charge (in some cases this will be the derivatized form, including adducts and protons).\n\nThis should be specified in Hill notation (EA Hill 1900), i.e. elements in the order C, H and then alphabetically all other elements. Counts of one may be omitted. Elements should be capitalized properly to avoid confusion (e.g., \u201cCO\u201d vs. \u201cCo\u201d). The chemical formula reported should refer to the neutral form. Charge state is reported by the charge field.\n\nExample N-acetylglucosamine would be encoded by the string \u201cC8H15NO6\u201d\n",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\tchemical_formula\t\u2026\nSME\t1\t\u2026\tC17H20N4O2\t\u2026\n"
    },
    "smiles": {
      "type": "string",
      "description": "The potential molecule\u2019s structure in the simplified molecular-input line-entry system (SMILES) for the small molecule.",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\tchemical_formula\tsmiles\t\u2026\nSML\t1\t\u2026\tC17H20N4O2\tC1=CC=C(C=C1)CCNC(=O)CCNNC(=O)C2=CC=NC=C2\t\u2026\n"
    },
    "inchi": {
      "type": "string",
      "description": "A standard IUPAC International Chemical Identifier (InChI) for the given substance.",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\tchemical_formula\t\u2026\tinchi\t\u2026\nSML\t1\t\u2026\tC17H20N4O2\t\u2026\tInChI=1S/C17H20N4O2/c22-16(19-12-6-14-4-2-1-3-5-14)9-13-20-21-17(23)15-7-10-18-11-8-15/h1-5,7-8,10-11,20H,6,9,12-13H2,(H,19,22)(H,21,23)\t\u2026\n"
    },
    "chemical_name": {
      "type": "string",
      "description": "The small molecule\u2019s chemical/common name, or general description if a chemical name is unavailable.",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\tchemical_name\t\u2026\nSML\t1\t\u2026\tN-(2-phenylethyl)-3-[2-(pyridine-4-carbonyl)hydrazinyl]propanamide\t\u2026\n"
    },
    "uri": {
      "type": "string",
      "description": "A URI pointing to the small molecule\u2019s entry in a database (e.g., the small molecule\u2019s HMDB, Chebi or KEGG entry).",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\turi\t\u2026\nSME\t1\t\u2026\thttp://www.hmdb.ca/metabolites/HMDB00054\n",
      "format": "uri"
    },
    "derivatized_form": {
      "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
      "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "cv_label": {
          "type": "string",
          "default": ""
        },
        "cv_accession": {
          "type": "string",
          "default": ""
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "default": ""
        }
      }
    },
    "adduct_ion": {
      "type": "string",
      "description": "The assumed classification of this molecule\u2019s adduct ion after detection, following the general style in the 2013 IUPAC recommendations on terms relating to MS e.g. [M+H]+, [M+Na]1+, [M+NH4]1+, [M-H]1-, [M+Cl]1-. If the adduct classification is ambiguous with regards to identification evidence it MAY be null.",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\tadduct_ion\t\u2026\nSME\t1\t\u2026\t[M+H]+\t\u2026\nSME\t2\t\u2026\t[M+2Na]2+\t\u2026\nOR (for negative mode):\nSME\t1\t\u2026\t[M-H]-\t\u2026\nSME\t2\t\u2026\t[M+Cl]-\t\u2026\n",
      "pattern": "^\\[\\d*M([+-][\\w]*)\\]\\d*[+-]$"
    },
    "exp_mass_to_charge": {
      "type": "number",
      "description": "The experimental mass/charge value for the precursor ion. If multiple adduct forms have been combined into a single identification event/search, then a single value e.g. for the protonated form SHOULD be reported here.",
      "x-mztab-example": "SEH\tSME_ID \t\u2026\texp_mass_to_charge\t\u2026\nSME\t1\t\u2026\t1234.5\t\u2026\n",
      "format": "double"
    },
    "charge": {
      "type": "integer",
      "description": "The small molecule evidence\u2019s charge value using positive integers both for positive and negative polarity modes.",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\tcharge\t\u2026\nSME\t1\t\u2026\t1\t\u2026\n",
      "format": "int32"
    },
    "theoretical_mass_to_charge": {
      "type": "number",
      "description": "The theoretical mass/charge value for the small molecule or the database mass/charge value (for a spectral library match).",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\ttheoretical_mass_to_charge \u2026\nSME\t1\t\u2026\t1234.71\t\u2026\n",
      "format": "double"
    },
    "spectra_ref": {
      "type": "array",
      "description": "Reference to a spectrum in a spectrum file, for example a fragmentation spectrum has been used to support the identification. If a separate spectrum file has been used for fragmentation spectrum, this MUST be reported in the metadata section as additional ms_runs. The reference must be in the format ms_run[1-n]:{SPECTRA_REF} where SPECTRA_REF MUST follow the format defined in 5.2 (including references to chromatograms where these are used to inform identification). Multiple spectra MUST be referenced using a \u201c|\u201d delimited list for the (rare) cases in which search engines have combined or aggregated multiple spectra in advance of the search to make identifications.\n\nIf a fragmentation spectrum has not been used, the value should indicate the ms_run to which is identification is mapped e.g. \u201cms_run[1]\u201d.\n",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\tspectra_ref\t\u2026\nSME\t1\t\u2026\tms_run[1]:index=5\t\u2026\n",
      "default": [],
      "items": {
        "type": "object",
        "required": [
          "ms_run",
          "reference"
        ],
        "description": "Reference to a spectrum in a spectrum file, for example a fragmentation spectrum has been used to support the identification. If a separate spectrum file has been used for fragmentation spectrum, this MUST be reported in the metadata section as additional ms_runs. The reference must be in the format ms_run[1-n]:{SPECTRA_REF} where SPECTRA_REF MUST follow the format defined in 5.2 (including references to chromatograms where these are used to inform identification). Multiple spectra MUST be referenced using a \u201c|\u201d delimited list for the (rare) cases in which search engines have combined or aggregated multiple spectra in advance of the search to make identifications.\n\nIf a fragmentation spectrum has not been used, the value should indicate the ms_run to which is identification is mapped e.g. \u201cms_run[1]\u201d.\n",
        "x-mztab-example": "SEH\tSME_ID\t\u2026\tspectra_ref\t\u2026\nSME\t1\t\t\tms_run[1]:index=5\t\u2026\n",
        "properties": {
          "ms_run": {
            "description": "Specification of ms_run. \nlocation: Location of the external data file e.g. raw files on which analysis has been performed. If the actual location of the MS run is unknown, a \u201cnull\u201d MUST be used as a place holder value, since the [1-n] cardinality is referenced elsewhere. If pre-fractionation has been performed, then [1-n] ms_runs SHOULD be created per assay. \ninstrument_ref: If different instruments are used in different runs, instrument_ref can be used to link a specific instrument to a specific run. \nformat: Parameter specifying the data format of the external MS data file. If ms_run[1-n]-format is present, ms_run[1-n]-id_format SHOULD also be present, following the parameters specified in Table 1. \nid_format: Parameter specifying the id format used in the external data file. If ms_run[1-n]-id_format is present, ms_run[1-n]-format SHOULD also be present.\nfragmentation_method: The type(s) of fragmentation used in a given ms run.\nscan_polarity: The polarity mode of a given run. Usually only one value SHOULD be given here except for the case of mixed polarity runs.\nhash: Hash value of the corresponding external MS data file defined in ms_run[1-n]-location. If ms_run[1-n]-hash is present, ms_run[1-n]-hash_method SHOULD also be present.\nhash_method: A parameter specifying the hash methods used to generate the String in ms_run[1-n]-hash. Specifics of the hash method used MAY follow the definitions of the mzML format. If ms_run[1-n]-hash is present, ms_run[1-n]-hash_method SHOULD also be present.\n",
            "x-mztab-example": "COM\tlocation can be a local or remote URI\nMTD\tms_run[1]-location\tfile:///C:/path/to/my/file.mzML\nMTD\tms_run[1]-instrument_ref\tinstrument[1]\nMTD\tms_run[1]-format\t[MS, MS:1000584, mzML file, ]\nMTD\tms_run[1]-id_format\t[MS, MS:1000530, mzML unique identifier, ]\nMTD\tms_run[1]-fragmentation_method[1]\t[MS, MS:1000133, CID, ]\nCOM\tfor mixed polarity scan scenarios\nMTD\tms_run[1]-scan_polarity[1]\t[MS, MS:1000130, positive scan, ]\nMTD\tms_run[1]-scan_polarity[2]\t[MS, MS:1000129, negative scan, ]\nMTD\tms_run[1]-hash_method\t[MS, MS:1000569, SHA-1, ]\nMTD\tms_run[1]-hash\tde9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3\n",
            "x-mztab-serialize-by-id": "true",
            "type": "object",
            "required": [
              "id",
              "location"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int32",
                "minimum": 1
              },
              "name": {
                "type": "string",
                "description": "The msRun's name."
              },
              "location": {
                "type": "string",
                "format": "uri",
                "description": "The msRun's location URI."
              },
              "instrument_ref": {
                "description": "The name, source, analyzer and detector of the instruments used in the experiment. Multiple instruments are numbered [1-n].",
                "x-mztab-example": "MTD\tinstrument[1]-name\t[MS, MS:1000449, LTQ Orbitrap,]\nMTD\tinstrument[1]-source\t[MS, MS:1000073, ESI,]\n\u2026\nMTD\tinstrument[2]-source\t[MS, MS:1000598, ETD,]\nMTD\tinstrument[1]-analyzer[1]\t[MS, MS:1000291, linear ion trap,]\n\u2026\nMTD\tinstrument[2]-analyzer[1]\t[MS, MS:1000484, orbitrap,]\nMTD\tinstrument[1]-detector\t[MS, MS:1000253, electron multiplier,]\n\u2026\nMTD\tinstrument[2]-detector\t[MS, MS:1000348, focal plane collector,]\n",
                "x-mztab-serialize-by-id": "true",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1
                  },
                  "name": {
                    "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
                    "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
                    "type": "object",
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1
                      },
                      "cv_label": {
                        "type": "string",
                        "default": ""
                      },
                      "cv_accession": {
                        "type": "string",
                        "default": ""
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string",
                        "default": ""
                      }
                    }
                  },
                  "source": {
                    "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
                    "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
                    "type": "object",
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1
                      },
                      "cv_label": {
                        "type": "string",
                        "default": ""
                      },
                      "cv_accession": {
                        "type": "string",
                        "default": ""
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string",
                        "default": ""
                      }
                    }
                  },
                  "analyzer": {
                    "type": "array",
                    "description": "The instrument's mass analyzer, as defined by the parameter.",
                    "default": [],
                    "items": {
                      "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
                      "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
                      "type": "object",
                      "required": [
                        "name",
                        "value"
                      ],
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1
                        },
                        "cv_label": {
                          "type": "string",
                          "default": ""
                        },
                        "cv_accession": {
                          "type": "string",
                          "default": ""
                        },
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    }
                  },
                  "detector": {
                    "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
                    "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
                    "type": "object",
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1
                      },
                      "cv_label": {
                        "type": "string",
                        "default": ""
                      },
                      "cv_accession": {
                        "type": "string",
                        "default": ""
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string",
                        "default": ""
                      }
                    }
                  }
                }
              },
              "format": {
                "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
                "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1
                  },
                  "cv_label": {
                    "type": "string",
                    "default": ""
                  },
                  "cv_accession": {
                    "type": "string",
                    "default": ""
                  },
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "default": ""
                  }
                }
              },
              "id_format": {
                "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
                "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1
                  },
                  "cv_label": {
                    "type": "string",
                    "default": ""
                  },
                  "cv_accession": {
                    "type": "string",
                    "default": ""
                  },
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "default": ""
                  }
                }
              },
              "fragmentation_method": {
                "type": "array",
                "default": [],
                "items": {
                  "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
                  "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
                  "type": "object",
                  "required": [
                    "name",
                    "value"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1
                    },
                    "cv_label": {
                      "type": "string",
                      "default": ""
                    },
                    "cv_accession": {
                      "type": "string",
                      "default": ""
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    }
                  }
                },
                "description": "The fragmentation methods applied during this msRun."
              },
              "scan_polarity": {
                "type": "array",
                "default": [],
                "items": {
                  "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
                  "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
                  "type": "object",
                  "required": [
                    "name",
                    "value"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1
                    },
                    "cv_label": {
                      "type": "string",
                      "default": ""
                    },
                    "cv_accession": {
                      "type": "string",
                      "default": ""
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    }
                  }
                },
                "description": "The scan polarity/polarities used during this msRun."
              },
              "hash": {
                "type": "string",
                "description": "The file hash value of this msRun's data file."
              },
              "hash_method": {
                "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
                "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1
                  },
                  "cv_label": {
                    "type": "string",
                    "default": ""
                  },
                  "cv_accession": {
                    "type": "string",
                    "default": ""
                  },
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "default": ""
                  }
                }
              }
            }
          },
          "reference": {
            "description": "The (vendor-dependendent) reference string to the actual mass spectrum.\n",
            "type": "string"
          }
        }
      }
    },
    "identification_method": {
      "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
      "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "cv_label": {
          "type": "string",
          "default": ""
        },
        "cv_accession": {
          "type": "string",
          "default": ""
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "default": ""
        }
      }
    },
    "ms_level": {
      "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
      "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "cv_label": {
          "type": "string",
          "default": ""
        },
        "cv_accession": {
          "type": "string",
          "default": ""
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "default": ""
        }
      }
    },
    "id_confidence_measure": {
      "type": "array",
      "description": "Any statistical value or score for the identification. The metadata section reports the type of score used, as id_confidence_measure[1-n] of type Param.",
      "x-mztab-example": "MTD\tid_confidence_measure[1]\t[MS, MS:1001419, SpectraST:discriminant score F,]\n\u2026\nSEH\tSME_ID\t\u2026\tid_confidence_measure[1]\t\u2026\nSME\t1\t\u2026\t0.7\t\u2026\n",
      "default": [],
      "items": {
        "type": "number",
        "format": "double"
      }
    },
    "rank": {
      "type": "integer",
      "description": "The rank of this identification from this approach as increasing integers from 1 (best ranked identification). Ties (equal score) are represented by using the same rank \u2013 defaults to 1 if there is no ranking system used.",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\trank\t\u2026\nSME\t1\t\u2026\t1\t\u2026\n",
      "format": "int32",
      "minimum": 1,
      "default": 1
    },
    "opt": {
      "type": "array",
      "description": "Additional columns can be added to the end of the small molecule evidence table. These column headers MUST start with the prefix \u201copt_\u201d followed by the {identifier} of the object they reference: assay, study variable, MS run or \u201cglobal\u201d (if the value relates to all replicates). Column names MUST only contain the following characters: \u2018A\u2019-\u2018Z\u2019, \u2018a\u2019-\u2018z\u2019, \u20180\u2019-\u20189\u2019, \u2018\u2019, \u2018-\u2019, \u2018[\u2019, \u2018]\u2019, and \u2018:\u2019. CV parameter accessions MAY be used for optional columns following the format: opt{identifier}_cv_{accession}_\\{parameter name}. Spaces within the parameter\u2019s name MUST be replaced by \u2018_\u2019.\n",
      "x-mztab-example": "SEH\tSME_ID\t\u2026\topt_assay[1]_my_value\t\u2026\topt_global_another_value\nSML\t1\t\u2026\tMy value\t\u2026\tsome other value\n",
      "default": [],
      "items": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "description": "Additional columns can be added to the end of the small molecule table. These column headers MUST start with the prefix \u201copt_\u201d followed by the {identifier} of the object they reference: assay, study variable, MS run or \u201cglobal\u201d (if the value relates to all replicates). Column names MUST only contain the following characters: \u2018A\u2019-\u2018Z\u2019, \u2018a\u2019-\u2018z\u2019, \u20180\u2019-\u20189\u2019, \u2018\u2019, \u2018-\u2019, \u2018[\u2019, \u2018]\u2019, and \u2018:\u2019. CV parameter accessions MAY be used for optional columns following the format: opt{identifier}_cv_{accession}_\\{parameter name}. Spaces within the parameter\u2019s name MUST be replaced by \u2018_\u2019.\n",
        "x-mztab-example": "SMH\tSML_ID\t\u2026\topt_assay[1]_my_value\t\u2026\topt_global_another_value\nSML\t1\t\u2026\tMy value\t\u2026\tsome other value\n",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The fully qualified column name."
          },
          "param": {
            "description": "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.\nParameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.\n",
            "x-mztab-example": "[MS, MS:1001477, SpectraST,]\n[,,A user parameter, The value]\n",
            "type": "object",
            "required": [
              "name",
              "value"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int32",
                "minimum": 1
              },
              "cv_label": {
                "type": "string",
                "default": ""
              },
              "cv_accession": {
                "type": "string",
                "default": ""
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string",
                "default": ""
              }
            }
          },
          "value": {
            "type": "string",
            "description": "The value for this column in a particular row."
          }
        }
      }
    },
    "comment": {
      "type": "array",
      "default": [],
      "items": {
        "type": "object",
        "description": "Comment lines can be placed anywhere in an mzTab file. These lines must start with the three-letter code COM and are ignored by most parsers. Empty lines can also occur anywhere in an mzTab file and are ignored.\n",
        "x-mztab-example": "COM\tThis is a comment line\n",
        "required": [
          "prefix",
          "msg"
        ],
        "properties": {
          "prefix": {
            "type": "string",
            "enum": [
              "COM"
            ],
            "default": "COM"
          },
          "msg": {
            "type": "string"
          },
          "line_number": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/schema#"
}